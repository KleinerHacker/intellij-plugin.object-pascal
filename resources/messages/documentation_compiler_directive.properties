cd.define=<h2 class="heading notopmargin">Syntax</h2>\
          <table>\
          <tr>\
          <td class="cellleft">\
          <i>define-directive:</i></td>\
          <td class="cellright"> &lt;variable-definition&gt; </td>\
          </tr>\
          <tr>\
          <td class="cellleft"></td>\
          <td class="cellright"> &lt;macro-definition&gt; </td>\
          </tr>\
          <tr>\
          <td class="cellleft"></td>\
          <td class="cellright"> &lt;default-visibility-set&gt; </td>\
          </tr>\
          </table>\
          <table><tr><td class="cellleft"><i>variable-definition:</i>\
          </td><td class="cellright"> (<b>define</b> | <b>:</b>)  [<b>private</b> | <b>protected</b> | <b>public</b>]  &lt;ident&gt;  [<b>[</b>  &lt;expr&gt;  <b>]</b>]  [[<b>=</b>] &lt;expr&gt;] </td></tr></table>\
          <table><tr><td class="cellleft"><i>macro-definition:</i>\
          </td><td class="cellright"> (<b>define</b> | <b>:</b>)  [<b>private</b> | <b>protected</b> | <b>public</b>]  &lt;ident&gt;  <b>(</b>  [&lt;formal-macro-args&gt;]  <b>)</b>  &lt;expr&gt; </td></tr></table>\
          <table><tr><td class="cellleft"><i>default-visibility-set:</i>\
          </td><td class="cellright"> (<b>define</b> | <b>:</b>)  <b>private</b> | <b>protected</b> | <b>public</b> </td></tr></table>\
          <table><tr><td class="cellleft"><i>formal-macro-args:</i>\
          </td><td class="cellright"> &lt;formal-macro-arg&gt;  [<b>,</b> &lt;formal-macro-arg&gt;]... </td></tr></table>\
          <table><tr><td class="cellleft"><i>formal-macro-arg:</i>\
          </td><td class="cellright"> &lt;by-val-arg&gt;  |  &lt;by-ref-arg&gt; </td></tr></table>\
          <table><tr><td class="cellleft"><i>by-val-arg:</i>\
          </td><td class="cellright"> [&lt;type-id&gt;]  &lt;ident&gt;  [<b>=</b> &lt;expr&gt;] </td></tr></table>\
          <table><tr><td class="cellleft"><i>by-ref-arg:</i>\
          </td><td class="cellright"> [&lt;type-id&gt;]  <b>*</b>  &lt;ident&gt; </td></tr></table>\
          <table><tr><td class="cellleft"><i>type-id:</i>\
          </td><td class="cellright"> <b>any</b>  |  <b>int</b>  |  <b>str</b>  |  <b>func</b> </td></tr></table>\
          <h2 class="heading">Description</h2>\
          <p>The first syntax ("variable-definition") defines a variable named <tt>ident</tt>, or assigns a value to an element of an array named <tt>ident</tt>. If none of the <tt>public</tt>, <tt>protected</tt>, or <tt>private</tt> keywords are specified, default <a href="topic_visibility.htm">visibility</a> is assumed.</p>\
          <p>The second syntax ("macro-definition") defines a macro named <tt>ident</tt>. When defining a macro there must be no whitespace between macro name and opening parenthesis, otherwise it will be treated as variable declaration.</p>\
          <p>The third syntax ("default-visibility-set") sets the default <a href="topic_visibility.htm">visibility</a> of further variable and macro definitions in this file. If no visibility declaration occurs in a file, public visibility is assumed by default.</p>\
          <h2 class="heading">Examples</h2>\
          <p><tt>#define MyAppName "My Program"<br/>#define MyAppVer <a href="topic_getfileversion.htm">GetFileVersion</a>("MyProg.exe")<br/>#define MyArray[0] 15<br/>#define Multiply(int A, int B = 10) A * B<br/>\
          </tt></p>
cd.undef=<div class="topicbody">\
         <h2 class="heading notopmargin">Syntax</h2>\
         <table><tr><td class="cellleft"><i>undef-directive:</i>\
         </td><td class="cellright"> (<b>undef</b> | <b>x</b>)  [<b>private</b> | <b>protected</b> | <b>public</b>]  &lt;ident&gt; </td></tr></table>\
         <h2 class="heading">Description</h2>\
         <p>Undefines (removes) a variable or macro. If no <a href="topic_visibility.htm">visibility</a> (<tt>public</tt>, <tt>protected</tt>, or <tt>private</tt>) is specified, ISPP first tries to remove a private variable of the given name, then protected, then public.</p>\
         <h2 class="heading">Examples</h2>\
         <p><tt>#undef MyVar<br/>#undef MyMacro<br/>#undef public MyVar<br/>\
         </tt></p>\
         <h2 class="heading">See also</h2>\
         <p><tt><a href="topic_define.htm">define</a></tt>, <tt><a href="topic_dim.htm">dim</a></tt>, <a href="topic_visibility.htm">Visibility of Identifiers</a>.</p>\
         </div>
cd.include=<div class="topicbody">\
           <h2 class="heading notopmargin">Syntax</h2>\
           <table>\
           <tr>\
           <td class="cellleft">\
           <i>include-directive:</i></td>\
           <td class="cellright"> (<b>include</b> | <b>+</b>)  <b>&lt;</b>  &lt;filename&gt;  <b>&gt;</b> </td>\
           </tr>\
           <tr>\
           <td class="cellleft"></td>\
           <td class="cellright"> (<b>include</b> | <b>+</b>)  &lt;expr&gt; </td>\
           </tr>\
           </table>\
           <h2 class="heading">Description</h2>\
           <p>Includes the <a href="topic_translation.htm">translation</a> of the specified file.</p>\
           <p>If the filename is enclosed in angle brackets, ISPP first searches for the file in the directory where current file resides, then in the directory where the file that included current file resides, and so on. If the file is not found, it is searched on current include path, set via <tt><a href="topic_pragma.htm">pragma</a></tt>, then on the path specified by INCLUDE environment variable.</p>\
           <p>If filename is an expression or specified in quotes, it is searched on current include path only.</p>\
           <p>The filename may be prefixed by "compiler:", in which case it looks for the file in the Compiler directory.</p>\
           <p>This directive cannot be used inline.</p>\
           <h2 class="heading">Examples</h2>\
           <p><tt>#include &lt;file.iss&gt;<br/>#include "c:\dir\file.iss"<br/>#include AddBackslash(<a href="topic_predefinedvars.htm">CompilerPath</a>) + "common.iss"<br/>\
           </tt></p>\
           <h2 class="heading">See also</h2>\
           <p><tt><a href="topic_file.htm">file</a></tt>, <tt><a href="topic_sub.htm">sub</a></tt>.</p>\
           </div>
cd.preproc=<p>A <a name="preproc"><tt>#preproc</tt></a> directive is supported, which specifies whether to use the built-in preprocessor which only supports the above <tt>#include</tt> directive or to use Inno Setup Preprocessor (ISPP) which supports many more directives. The syntax is:</p>\
           <pre class="indent examplebox">\
           #preproc builtin\
           #preproc ispp\
           </pre>