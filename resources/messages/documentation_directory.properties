# Properties
property.name=<p>The name of the directory to create, which normally will start with one of the directory constants.</p>
property.attribute=<p>Specifies additional attributes for the directory. This can include one or more of the following: <tt>readonly</tt>, <tt>hidden</tt>, <tt>system</tt>. If this parameter is not specified, Setup does not assign any special attributes to the directory.</p> \
                             <p>If the directory already exists, the specified attributes will be combined with the directory's existing attributes.</p>
property.permissions=<p>Specifies additional permissions to grant in the file's ACL (access control list). It is not recommended that you use this parameter if you aren't familiar with ACLs or why you would need to change them, because misusing it could negatively impact system security.</p>\
                               <p>For this parameter to have an effect the file must be located on a partition that supports ACLs (such as NTFS), and the current user must be able to change the permissions on the file. In the event these conditions are not met, no error message will be displayed, and the permissions will not be set.</p>\
                               <p>This parameter should <i>only</i> be used on files private to your application. Never change the ACLs on shared system files, otherwise you can open up security holes on your users' systems.</p>\
                               <p>The specified permissions are set regardless of whether the file existed prior to installation.</p>\
                               <p>This parameter can include one or more space separated values in the format:</p>\
                               <div class="indent"><p><tt><a href="topic_usergroupids.htm">&lt;user or group identifier&gt;</a>-&lt;access type&gt;</tt></p></div>
property.flags=<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces.</p>

# Flags
flags.deleteafterinstall=<p>Instructs Setup to create the directory as usual, but then delete it once the installation is completed (or aborted) if it's empty. This can be useful when extracting temporary data needed by a program executed in the script's [Run] section.</p>\
                                  <p>This flag will not cause directories that already existed before installation to be deleted.</p>
flags.setntfscompression=<p>Instructs Setup to enable NTFS compression on the directory. If it fails to set the compression state for any reason (for example, if compression is not supported by the file system), no error message will be displayed.</p>\
                                  <p>If the directory already exists, the compression state of any files present in the directory will not be changed.</p>
flags.uninsalwaysuninstall=<p>Instructs the uninstaller to always attempt to delete the directory if it's empty. Normally the uninstaller will only try to delete the directory if it didn't already exist prior to installation.</p>
flags.uninsneveruninstall=<p>Instructs the uninstaller to not attempt to delete the directory. By default, the uninstaller deletes any directory specified in the [Dirs] section if it is empty.</p>
flags.unsetntfscompression=<p>Instructs Setup to disable NTFS compression on the directory. If it fails to set the compression state for any reason (for example, if compression is not supported by the file system), no error message will be displayed.</p>\
                                    <p>If the directory already exists, the compression state of any files present in the directory will not be changed.</p>