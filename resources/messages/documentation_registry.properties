# Properties
property.root=<p>The root key. This must be one of the following values:</p>\
                       <div class="indent">\
                       <table>\
                       <tr><td class="cellleft"><tt>HKCR</tt></td><td class="cellright">(HKEY_CLASSES_ROOT)</td></tr>\
                       <tr><td class="cellleft"><tt>HKCU</tt></td><td class="cellright">(HKEY_CURRENT_USER)</td></tr>\
                       <tr><td class="cellleft"><tt>HKLM</tt></td><td class="cellright">(HKEY_LOCAL_MACHINE)</td></tr>\
                       <tr><td class="cellleft"><tt>HKU</tt></td><td class="cellright">(HKEY_USERS)</td></tr>\
                       <tr><td class="cellleft"><tt>HKCC</tt></td><td class="cellright">(HKEY_CURRENT_CONFIG)</td></tr>\
                       </table>\
                       </div>\
                       <p>The values may have a suffix of <tt>32</tt> or <tt>64</tt>. Root key values with a suffix of <tt>32</tt> (for example, <tt>HKLM32</tt>) map to the 32-bit view of the registry; root key values with a suffix of <tt>64</tt> (for example, <tt>HKLM64</tt>) map to the 64-bit view of the registry.</p>\
                       <p>Root key values with a suffix of <tt>64</tt> can only be used when Setup is running on 64-bit Windows, otherwise an error will occur. On an installation supporting both 32- and 64-bit architectures, it is possible to avoid the error by adding a <tt>Check: IsWin64</tt> parameter, which will cause the entry to be silently skipped when running on 32-bit Windows.</p>\
                       <p>A root key value without a suffix (for example, <tt>HKLM</tt>) is equivalent to the value with a suffix of <tt>32</tt> (for example, <tt>HKLM32</tt>) unless the install is running in <a href="topic_32vs64bitinstalls.htm">64-bit mode</a>, in which case it is equivalent to the value with a suffix of <tt>64</tt> (for example, <tt>HKLM64</tt>).</p>
property.subkey=<p>The subkey name, which can include constants.</p>
property.valuetype=<p>The data type of the value. This must be one of the following:</p>\
                            <div class="indent"><p><tt>\
                            none<br/>\
                            string<br/>\
                            expandsz<br/>\
                            multisz<br/>\
                            dword<br/>\
                            qword<br/>\
                            binary</tt></p></div>
property.valuename=<p>The name of the value to create, which can include constants. If this is blank, it will write to the "Default" value. If the <tt>ValueType</tt> parameter is set to <tt>none</tt>, this parameter is ignored.</p>
property.valuedata=<p>The data for the value. If the <tt>ValueType</tt> parameter is <tt>string</tt>, <tt>expandsz</tt>, or <tt>multisz</tt>, this is a string that can include constants. If the data type is <tt>dword</tt> or <tt>qword</tt>, this can be a decimal integer (e.g. "123"), a hexadecimal integer (e.g. "$7B"), or a constant which resolves to an integer. If the data type is <tt>binary</tt>, this is a sequence of hexadecimal bytes in the form: "00 ff 12 34". If the data type is <tt>none</tt>, this is ignored.</p>\
                            <p>On a <tt>string</tt>, <tt>expandsz</tt>, or <tt>multisz</tt> type value, you may use a special constant called <tt>{olddata}</tt> in this parameter. <tt>{olddata}</tt> is replaced with the previous data of the registry value. The <tt>{olddata}</tt> constant can be useful if you need to append a string to an existing value, for example, <tt>{olddata};{app}</tt>. If the value does not exist or the existing value isn't a string type, the {olddata} constant is silently removed. {olddata} will also be silently removed if the value being created is a <tt>multisz</tt> type but the existing value is not a multi-string type (i.e. it's REG_SZ or REG_EXPAND_SZ), and vice versa.</p>\
                            <p>On a <tt>multisz</tt> type value, you may use a special constant called <tt>{break}</tt> in this parameter to embed line breaks (nulls).</p>
property.permissions=<p>Specifies additional permissions to grant in the registry key's ACL (access control list). It is not recommended that you use this parameter if you aren't familiar with ACLs or why you would need to change them, because misusing it could negatively impact system security.</p>\
                              <p>For this parameter to have an effect the current user must be able to change the permissions on the registry key. In the event these conditions are not met, no error message will be displayed, and the permissions will not be set.</p>\
                              <p>This parameter should <i>only</i> be used on registry keys private to your application. Never change the ACLs on a top-level key like HKEY_LOCAL_MACHINE\SOFTWARE, otherwise you can open up security holes on your users' systems.</p>\
                              <p>The specified permissions are set regardless of whether the registry key existed prior to installation. The permissions are not set if <tt>ValueType</tt> is <tt>none</tt> and the <tt>deletekey</tt> flag or <tt>deletevalue</tt> flag is used.</p>\
                              <p>On Itanium editions of Windows, this parameter is only effectual on 32-bit registry keys. (There is no such limitation on x64 editions of Windows.)</p>\
                              <p>This parameter can include one or more space separated values in the format:</p>\
                              <div class="indent"><p><tt><a href="topic_usergroupids.htm">&lt;user or group identifier&gt;</a>-&lt;access type&gt;</tt></p></div>
property.flags=<p>This parameter is a set of extra options. Multiple options may be used by separating them by spaces.</p>

# Flags
flags.createvalueifdoesntexist=<p>When this flag is specified, Setup will create the value <i>only</i> if a value of the same name doesn't already exist. This flag has no effect if the data type is <tt>none</tt>, or if you specify the <tt>deletevalue</tt> flag.</p>
flags.deletekey=<p>When this flag is specified, Setup will first try deleting the entire key if it exists, including all values and subkeys in it. If <tt>ValueType</tt> is not <tt>none</tt>, it will then create a new key and value.</p>\
                        <p>To prevent disasters, this flag is ignored during installation if <tt>Subkey</tt> is blank or contains only backslashes.</p>
flags.deletevalue=<p>When this flag is specified, Setup will first try deleting the value if it exists. If <tt>ValueType</tt> is not <tt>none</tt>, it will then create the key if it didn't already exist, and the new value.</p>
flags.dontcreatekey=<p>When this flag is specified, Setup will not attempt to create the key or any value if the key did not already exist on the user's system. No error message is displayed if the key does not exist.</p>\
                            <p>Typically this flag is used in combination with the <tt>uninsdeletekey</tt> flag, for deleting keys during uninstallation but not creating them during installation.</p>
flags.noerror=<p>Don't display an error message if Setup fails to create the key or value for any reason.</p>
flags.preservestringtype=<p>This is only applicable when the <tt>ValueType</tt> parameter is <tt>string</tt> or <tt>expandsz</tt>. When this flag is specified and the value did not already exist or the existing value isn't a string type (REG_SZ or REG_EXPAND_SZ), it will be created with the type specified by <tt>ValueType</tt>. If the value did exist and is a string type, it will be replaced with the same value type as the pre-existing value.</p>
flags.uninsclearvalue=<p>When the program is uninstalled, set the value's data to a null string (type REG_SZ). This flag cannot be combined with the <tt>uninsdeletekey</tt> flag.</p>
flags.uninsdeletekey=<p>When the program is uninstalled, delete the entire key, including all values and subkeys in it. It obviously wouldn't be a good idea to use this on a key that is used by Windows itself. You should only use this on keys private to your application.</p>\
                             <p>To prevent disasters, this flag is ignored during installation if <tt>Subkey</tt> is blank or contains only backslashes.</p>
flags.uninsdeletekeyifempty=<p>When the program is uninstalled, delete the key if it has no values or subkeys left in it. This flag can be combined with <tt>uninsdeletevalue.</tt></p>\
                                    <p>To prevent disasters, this flag is ignored during installation if <tt>Subkey</tt> is blank or contains only backslashes.</p>
flags.uninsdeletevalue=<p>Delete the value when the program is uninstalled. This flag can be combined with <tt>uninsdeletekeyifempty.</tt></p>\
                               <p><b>NOTE:</b> In Inno Setup versions prior to 1.1, you could use this flag along with the data type <tt>none</tt> and it would function as a "delete key if empty" flag. This technique is no longer supported. You must now use the <tt>uninsdeletekeyifempty</tt> flag to accomplish this.</p>

# Root
root.hkcr=HKEY_CLASSES_ROOT
root.hkcu=HKEY_CURRENT_USER
root.hklm=HKEY_LOCAL_MACHINE
root.hku=HKEY_USERS
root.hkcc=HKEY_CURRENT_CONFIG

# Value Types
valuetype.none=Setup will create the key but <i>not</i> a value. In this case the <tt>ValueName</tt> and <tt>ValueData</tt> parameters are ignored.
valuetype.string=Setup will create a string (REG_SZ) value.
valuetype.expandsz=Setup will create an expand-string (REG_EXPAND_SZ) value.
valuetype.multisz=Setup will create an multi-string (REG_MULTI_SZ) value.
valuetype.dword=Setup will create a 32-bit integer (REG_DWORD) value.
valuetype.qword=Setup will create a 64-bit integer (REG_QWORD) value.
valuetype.binary=Setup will create a binary (REG_BINARY) value.

