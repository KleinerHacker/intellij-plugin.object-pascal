{
    parserClass="org.pcsoft.plugins.intellij.pascal.language.parser.PascalParser"
    parserUtilClass="org.pcsoft.plugins.intellij.pascal.language.parser.PascalParserUtil"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Pascal"
    psiImplClassSuffix="Impl"
    psiPackage="org.pcsoft.plugins.intellij.pascal.language.parser.psi.element"
    psiImplPackage="org.pcsoft.plugins.intellij.pascal.language.parser.psi.element"

    elementTypeHolderClass="org.pcsoft.plugins.intellij.pascal.language.parser.PascalGenTypes"
    elementTypeClass="org.pcsoft.plugins.intellij.pascal.language.parser.psi.PascalElementType"
    tokenTypeClass="org.pcsoft.plugins.intellij.pascal.language.parser.psi.PascalTokenType"

    psiImplUtilClass="org.pcsoft.plugins.intellij.pascal.language.parser.psi.PascalPsiUtils"
}

pascalFile ::= programDeclaration | unitDeclaration

programDeclaration ::= 'program' NAME ';' commonDeclarationBody programDeclarationBody
{
    methods=[getName]
}
unitDeclaration ::= 'unit' NAME ';' commonDeclarationBody
{
    methods=[getName]
}

private commonDeclarationBody ::= usesDeclaration? (constantDeclaration | typeDeclaration | variableDeclaration | subProgramDeclaration)*
private programDeclarationBody ::= 'begin' statementList 'end' '.'?

// Uses
usesDeclaration ::= 'uses' usesValueList
private usesValueList ::= (usesValue ',')* (usesValue ';')?
usesValue ::= NAME
{
    methods=[getName]
}

// Constants
constantDeclaration ::= 'const' constantDefinition*
constantDefinition ::= constantName constantType? constantValue ';'
{
    methods=[getName]
}
constantName ::= NAME
{
    methods=[getName]
}
constantType ::= ':' referenceType
constantValue ::= '=' value

// Variables
variableDeclaration ::= 'var' variableDefinition*
variableDefinition ::= (variableName ',')* variableName ':' variableType ';'
variableName ::= NAME
{
    methods=[getName]
}
variableType ::= type

// Properties
propertyDefinition ::= 'property' propertyName ':' propertyType propertyRead? propertyWrite? propertyDefault? propertyStored? ';' subProgramFlag*
propertyName ::= NAME
propertyType ::= type
propertyRead ::= 'read' propertyReference
propertyWrite ::= 'write' propertyReference
propertyReference ::= KEYWORD | NAME
propertyStored ::= 'stored' KEYWORD
propertyDefault ::= 'default' value

// Types
typeDeclaration ::= 'type' typeDefinition*
typeDefinition ::= typeName '=' typeSpecification ';'
typeName ::= NAME
typeSpecification ::= classType | objectType | recordType | range | arrayType | referenceType | enumerationValue

// Functions / Procedures
subProgramDeclaration ::= subProgramDefinition+
subProgramDefinition ::= subProgramType objectReferenceNameList? subProgramName subProgramParameterList? subProgramReturn? ';' subProgramFlag* (variableDeclaration? subProgramBody)?
{
    methods=[getType getName isOverload isOverride isVirtual isDynamic]
}
subProgramType ::= 'function' | 'procedure' | 'constructor' | 'destructor'
{
    methods=[getType]
}
subProgramName ::= NAME
{
    methods=[getName]
}
private subProgramParameterList ::= '(' subProgramParameter (',' subProgramParameter)* ')'
subProgramParameter ::= 'const'? (subProgramParameterName ',')* subProgramParameterName ':' type subProgramParameterDefault?
{
    methods=[isConstant]
}
subProgramParameterDefault ::= '=' value
subProgramParameterName ::= NAME
{
    methods=[getName]
}
subProgramReturn ::= ':' type
private subProgramBody ::= 'begin' statementList 'end' ';'
private subProgramFlag ::= subProgramFlagOverload | subProgramFlagOverride | subProgramFlagVirtual | subProgramFlagDynamic
subProgramFlagOverload ::= 'overload' ';'
subProgramFlagOverride ::= 'override' ';'
subProgramFlagVirtual ::= 'virtual' ';'
subProgramFlagDynamic ::= 'dynamic' ';'

// (Sub-)Program content
private statementList ::= (statement ';')*
statement ::= inheritedStatement | withStatement | assemblerStatement | loopForStatement | repeatStatement | whileStatement | ifStatement | caseStatement | assignmentStatement | value
// Assignments
assignmentStatement ::= referenceValue ':=' (conditionStatement | calculationStatement)
// Calculation
calculationStatement ::= ('(' calculationContent ')') | calculationContent
private calculationContent ::= calculationValue (('+'|'-'|'*'|'/'|'mod'|'div') calculationStatement)*
calculationValue ::= value
// Inherited
inheritedStatement ::= 'inherited' value?
// For Loop
loopForStatement ::= 'for' (loopForIndexVariant | loopForEachVariant) 'do' statementBody
loopForIndexVariant ::= loopForIndexer ':=' value ('to' | 'downto') value
loopForIndexer ::= NAME
loopForEachVariant ::= value 'in' value
// Repeat
repeatStatement ::= 'repeat' statementList 'until' conditionStatement
// While
whileStatement ::= 'while' conditionStatement 'do' statementBody ';'
// Condition
conditionStatement ::= ('(' conditionDefinitionContent ')') | conditionDefinitionContent
private conditionDefinitionContent ::= conditionDefinition (('and'|'or'|'xor') conditionStatement)*
conditionDefinition ::= ('(' conditionContent ')') | conditionContent
private conditionContent ::= 'not'? calculationStatement ('='|'<>'|'<='|'>='|'<'|'>') (('(' conditionDefinitionContent ')') | calculationStatement)
// If
ifStatement ::= 'if' conditionStatement 'then' statementBody
// Case
caseStatement ::= 'case' value 'of' caseCondition* caseElse? 'end'
caseCondition ::= caseSelector ':' statementBody ';'
caseElse ::= 'else' statementBody ';'
caseSelector ::= (value ',')* value
// With
withStatement ::= 'with' value 'do' statementBody
// Assembler
assemblerStatement ::= 'asm' EOL assemblerLine* 'end'
assemblerLine ::= NAME NAME ',' value EOL

// Common
// Body
private statementBody ::= statementContent | statement
private statementContent ::= 'begin' statementList 'end'
// Types
type ::= stringType | arrayType | recordType | referenceType
referenceType ::= '^'? KEYWORD | NAME
stringType ::= 'string' stringTypeSize?
private stringTypeSize ::= '[' value ']'
arrayType ::= 'packed'? 'array' arrayTypeDefinition
private arrayTypeDefinition ::= '[' arrayTypeSize ']' ('of' referenceType)?
private arrayTypeSize ::= ((range | rangeValue) ',')* (range | rangeValue)
recordType ::= 'record' recordTypeBody
private recordTypeBody ::= variableDefinition* 'end'
objectType ::= 'object' objectTypeBase? objectTypeBody
objectTypeBase ::= '(' (KEYWORD | NAME) ')'
private objectTypeBody ::= (variableDefinition | subProgramDefinition)* 'end'
classType ::= 'class' classTypeBase? classTypeBody
classTypeBase ::= '(' (KEYWORD | NAME) ')'
private classTypeBody ::= classTypeContentList* 'end'
private classTypeContentList ::= (('private' | 'public' | 'published') classTypeContent?) | classTypeContent
classTypeContent ::= (subProgramDefinition | propertyDefinition | variableDefinition)+
// Values
value ::= DECIMAL | INTEGER | stringValue | recordValue | referenceValue | listValue
stringValue ::= "'" STRING "'"
range ::= rangeValue '..' rangeValue
rangeValue ::= INTEGER | referenceValuePlain
enumerationValue ::= '(' (value ',')* value ')'
referenceValue ::= ((referenceValueCast ('.' referenceValue)?) | referenceValuePlain) referenceValueArgumentList?
referenceValueArgumentList ::= '(' (calculationStatement ',')* calculationStatement ')'
referenceValueCast ::= objectReferenceNameList? referenceName '(' referenceValue ')'
referenceValuePlain ::= objectReferenceNameList? referenceName arraySegment?
recordValue ::= '(' (recordValueField ';')* recordValueField ')'
recordValueField ::= recordValueFieldReference ':' value  
recordValueFieldReference ::= NAME
listValue ::= '(' (value ',')* value ')'
// References
referenceName ::= NAME
private objectReferenceNameList ::= (objectReferenceName '.')+ | (objectReferenceSelf '.')
objectReferenceName ::= NAME
objectReferenceSelf ::= 'self'
// Other
arraySegment ::= '[' arraySegmentList ']'
private arraySegmentList ::= (value ',')* value